"""–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π SCRR."""

import torch
import numpy as np
from src.scrr_fx import SCRR_Tensor


def test_scrr_internal_debug():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SCRR –ù–ï –∫—Ä–∞—à–∏—Ç—Å—è –≤ –Ω–æ–ª—å, –∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç."""
    print("\n" + "="*80)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ù–£–¢–†–ï–ù–ù–ò–• –û–ü–ï–†–ê–¶–ò–ô SCRR")
    print("="*80)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ - –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ù–ï –Ω–æ–ª—å
    print("\n1Ô∏è‚É£ –¢–ï–°–¢: 1000000.1 + 0.9 (–¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å 1000001.0)")
    
    a_val = 1000000.1
    b_val = 0.9
    expected = a_val + b_val  # 1000001.0
    
    a_scrr = SCRR_Tensor.from_float(torch.tensor(a_val, dtype=torch.float64), k=4)
    b_scrr = SCRR_Tensor.from_float(torch.tensor(b_val, dtype=torch.float64), k=4)
    
    print(f"a_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {a_scrr.components}")
    print(f"b_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {b_scrr.components}")
    
    result_scrr = a_scrr + b_scrr
    print(f"(a+b) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {result_scrr.components}")
    
    final_result = result_scrr.to_float().item()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç SCRR: {final_result}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π: {expected}")
    print(f"–û—à–∏–±–∫–∞: {abs(final_result - expected)}")
    
    if abs(final_result) < 1e-10:
        print("üö® –ê–õ–ï–†–¢: SCRR –≤—ã–¥–∞–ª –ø–æ—á—Ç–∏ –Ω–æ–ª—å - –≤–æ–∑–º–æ–∂–Ω–æ –∫—Ä–∞—à!")
    else:
        print("‚úÖ SCRR —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –£–º–Ω–æ–∂–µ–Ω–∏–µ - –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ù–ï –Ω–æ–ª—å  
    print("\n2Ô∏è‚É£ –¢–ï–°–¢: 1000.5 * 999.5 (–¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å ~999999)")
    
    a_val = 1000.5
    b_val = 999.5  
    expected = a_val * b_val
    
    a_scrr = SCRR_Tensor.from_float(torch.tensor(a_val, dtype=torch.float64), k=4)
    b_scrr = SCRR_Tensor.from_float(torch.tensor(b_val, dtype=torch.float64), k=4)
    
    print(f"a_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {a_scrr.components}")
    print(f"b_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {b_scrr.components}")
    
    result_scrr = a_scrr * b_scrr
    print(f"(a*b) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {result_scrr.components}")
    
    final_result = result_scrr.to_float().item()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç SCRR: {final_result}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π: {expected}")
    print(f"–û—à–∏–±–∫–∞: {abs(final_result - expected)}")
    
    if abs(final_result) < 1e-10:
        print("üö® –ê–õ–ï–†–¢: SCRR –≤—ã–¥–∞–ª –ø–æ—á—Ç–∏ –Ω–æ–ª—å - –≤–æ–∑–º–æ–∂–Ω–æ –∫—Ä–∞—à!")
    else:
        print("‚úÖ SCRR —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê
    print("\n3Ô∏è‚É£ –¢–ï–°–¢: 1.0 - (1.0 - 1e-16) - —Ç–æ—Ç —Å–∞–º—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π!")
    
    one = torch.tensor(1.0, dtype=torch.float64)
    small = torch.tensor(1e-16, dtype=torch.float64)
    
    # float64 —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    intermediate_float64 = one - small  # 1.0 - 1e-16
    result_float64 = one - intermediate_float64  # 1.0 - (1.0 - 1e-16)
    
    print(f"float64: 1.0 - 1e-16 = {intermediate_float64.item():.20e}")
    print(f"float64: 1.0 - (1.0 - 1e-16) = {result_float64.item():.20e}")
    
    # SCRR —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    one_scrr = SCRR_Tensor.from_float(one, k=8)
    small_scrr = SCRR_Tensor.from_float(small, k=8)
    
    print(f"\none_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {one_scrr.components}")
    print(f"small_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {small_scrr.components}")
    
    intermediate_scrr = one_scrr - small_scrr
    print(f"(1.0 - 1e-16) SCRR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {intermediate_scrr.components}")
    
    result_scrr_tensor = one_scrr - intermediate_scrr  
    print(f"1.0 - (1.0 - 1e-16) SCRR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {result_scrr_tensor.components}")
    
    result_scrr = result_scrr_tensor.to_float().item()
    
    print(f"\n–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"float64: {result_float64.item():.20e}")
    print(f"SCRR:    {result_scrr:.20e}")
    
    if abs(result_scrr) < 1e-20:
        print("üö® –ê–õ–ï–†–¢: SCRR –≤—ã–¥–∞–ª –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–æ–ª—å!")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ:")
        print("   1) –ö—Ä–∞—à/–æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ")
        print("   2) –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–æ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ)")
    else:
        print("‚úÖ SCRR –¥–∞–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # –¢–µ—Å—Ç 4: –ò–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–µ–Ω—É–ª–µ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
    print("\n4Ô∏è‚É£ –ö–û–ù–¢–†–û–õ–¨–ù–´–ô –¢–ï–°–¢: sqrt(2) * sqrt(2) - 2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~0, –Ω–æ –ù–ï —Ç–æ—á–Ω–æ 0)")
    
    sqrt2_approx = 1.4142135623730951  # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ sqrt(2)
    
    sqrt2_scrr = SCRR_Tensor.from_float(torch.tensor(sqrt2_approx, dtype=torch.float64), k=8)
    two_scrr = SCRR_Tensor.from_float(torch.tensor(2.0, dtype=torch.float64), k=8)
    
    print(f"sqrt2_scrr –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {sqrt2_scrr.components}")
    
    squared_scrr = sqrt2_scrr * sqrt2_scrr
    print(f"sqrt2¬≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {squared_scrr.components}")
    
    result_scrr_tensor = squared_scrr - two_scrr
    print(f"(sqrt2¬≤ - 2) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {result_scrr_tensor.components}")
    
    result_scrr = result_scrr_tensor.to_float().item()
    
    # float64 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è  
    result_float64 = (sqrt2_approx * sqrt2_approx - 2.0)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã sqrt(2)¬≤ - 2:")
    print(f"float64: {result_float64:.20e}")
    print(f"SCRR:    {result_scrr:.20e}")
    
    if abs(result_scrr) < 1e-20 and abs(result_float64) > 1e-17:
        print("üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: SCRR –¥–∞–µ—Ç –Ω–æ–ª—å —Ç–∞–º –≥–¥–µ float64 –¥–∞–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    else:
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≥–ª–∞—Å—É—é—Ç—Å—è")
    
    print("\n" + "="*80)
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*80)


if __name__ == "__main__":
    test_scrr_internal_debug() 